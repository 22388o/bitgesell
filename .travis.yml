# The test build matrix (stage: test) is constructed to test a wide range of
# configurations, rather than a single pass/fail. This helps to catch build
# failures and logic errors that present on platforms other than the ones the
# author has tested.
#
# Some builders use the dependency-generator in `./depends`, rather than using
# apt-get to install build dependencies. This guarantees that the tester is
# using the same versions as Gitian, so the build results are nearly identical
# to what would be found in a final release.
#
# In order to avoid rebuilding all dependencies for each build, the binaries
# are cached and re-used when possible. Changes in the dependency-generator
# will trigger cache-invalidation and rebuilds as necessary.
#
# Travis caches can be manually removed if necessary. This is one of the very
# few manual operations that is possible with Travis, and it can be done by a
# BGL Core GitHub member via the Travis web interface [0].
#
# Travis CI uploads the cache after the script phase of the build [1].
# However, the build is terminated without saving the cache if it takes over
# 50 minutes [2]. Thus, if we spent too much time in early build stages, fail
# with an error and save the cache.
#
# [0] https://travis-ci.org/BGL/BGL/caches
# [1] https://docs.travis-ci.com/user/caching/#build-phases
# [2] https://docs.travis-ci.com/user/customizing-the-build#build-timeouts

version: ~> 1.0

dist: bionic
os: linux
language: minimal
arch: amd64
cache:
  directories:
    - $TRAVIS_BUILD_DIR/depends/built
    - $TRAVIS_BUILD_DIR/depends/sdk-sources
    - $TRAVIS_BUILD_DIR/ci/scratch/.ccache
    - $TRAVIS_BUILD_DIR/releases/$HOST
stages:
  - lint
  - test
env:
  global:
    - WIDEMUL=auto  BIGNUM=auto  STATICPRECOMPUTATION=yes  ECMULTGENPRECISION=auto  ASM=no  BUILD=check  WITH_VALGRIND=yes RUN_VALGRIND=no EXTRAFLAGS=  HOST=  ECDH=no  RECOVERY=no SCHNORRSIG=no EXPERIMENTAL=no CTIMETEST=yes BENCH=yes ITERS=2
  matrix:
    - WIDEMUL=int64   RECOVERY=yes
    - WIDEMUL=int64   ECDH=yes  EXPERIMENTAL=yes SCHNORRSIG=yes
    - WIDEMUL=int128
    - WIDEMUL=int128  RECOVERY=yes EXPERIMENTAL=yes SCHNORRSIG=yes
    - WIDEMUL=int128  ECDH=yes EXPERIMENTAL=yes SCHNORRSIG=yes
    - WIDEMUL=int128                    ASM=x86_64
    - BIGNUM=no
    - BIGNUM=no       RECOVERY=yes EXPERIMENTAL=yes SCHNORRSIG=yes
    - BIGNUM=no       STATICPRECOMPUTATION=no
    - BUILD=distcheck WITH_VALGRIND=no CTIMETEST=no BENCH=no
    - CPPFLAGS=-DDETERMINISTIC
    - CFLAGS=-O0 CTIMETEST=no
    - ECMULTGENPRECISION=2
    - ECMULTGENPRECISION=8
    - RUN_VALGRIND=yes BIGNUM=no ASM=x86_64 ECDH=yes  RECOVERY=yes EXPERIMENTAL=yes SCHNORRSIG=yes EXTRAFLAGS="--disable-openssl-tests" BUILD=
matrix:
  fast_finish: true
  include:
    - compiler: clang
      os: linux
      env: HOST=i686-linux-gnu
      addons:
        apt:
          packages:
            - gcc-multilib
            - libgmp-dev:i386
            - valgrind
            - libtool-bin
            - libc6-dbg:i386
    - compiler: clang
      env: HOST=i686-linux-gnu
      os: linux
      addons:
        apt:
          packages:
            - gcc-multilib
            - valgrind
            - libtool-bin
            - libc6-dbg:i386
    - compiler: gcc
      env: HOST=i686-linux-gnu
      os: linux
      addons:
        apt:
          packages:
            - gcc-multilib
            - valgrind
            - libtool-bin
            - libc6-dbg:i386
    - compiler: gcc
      os: linux
      env: HOST=i686-linux-gnu
      addons:
        apt:
          packages:
            - gcc-multilib
            - libgmp-dev:i386
            - valgrind
            - libtool-bin
            - libc6-dbg:i386
    # S390x build (big endian system)
    - compiler: gcc
      env: HOST=s390x-unknown-linux-gnu ECDH=yes RECOVERY=yes EXPERIMENTAL=yes SCHNORRSIG=yes CTIMETEST=
      arch: s390x

    - stage: lint
      name: 'lint'
      env:
      cache: pip
      language: python
      python: '3.5' # Oldest supported version according to doc/dependencies.md
      install:
        - set -o errexit; source ./ci/lint/04_install.sh
      before_script:
        - set -o errexit; source ./ci/lint/05_before_script.sh
      script:
        - set -o errexit; source ./ci/lint/06_script.sh

    - stage: test
      name: 'ARM  [GOAL: install]  [buster]  [unit tests, no functional tests]'
      arch: arm64  # Can disable QEMU_USER_CMD and run the tests natively without qemu
      env: >-
        FILE_ENV="./ci/test/00_setup_env_arm.sh"
        QEMU_USER_CMD=""

    - stage: test
      name: 'Win64  [GOAL: deploy]  [unit tests, no gui, no boost::process, no functional tests]'
      env: >-
        FILE_ENV="./ci/test/00_setup_env_win64.sh"

    - stage: test
      name: '32-bit + dash  [GOAL: install]  [CentOS 7]  [gui]'
      env: >-
        FILE_ENV="./ci/test/00_setup_env_i686_centos.sh"

    - stage: test
      name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no wallet]'
      env: >-
        FILE_ENV="./ci/test/00_setup_env_native_nowallet.sh"

    - stage: test
      name: 'macOS 10.14 native [GOAL: install] [GUI] [no depends]'
      os: osx
      # Use the most recent version:
      # Xcode 11.3.1, macOS 10.14, SDK 10.15
      # https://docs.travis-ci.com/user/reference/osx/#macos-version
      osx_image: xcode11.3
      addons:
        homebrew:
          packages:
          - berkeley-db4
          - miniupnpc
          - qrencode
          - sqlite
          - ccache
          - zeromq
      env: >-
        DANGER_RUN_CI_ON_HOST=true
        CI_USE_APT_INSTALL=no
        FILE_ENV="./ci/test/00_setup_env_mac_host.sh"
